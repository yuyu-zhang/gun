static HALF_ROAD_WIDTH: f64 = 0.7;

pub(crate) struct Path {
    point_with_len: Vec<f64>,
    rd_fl: f64,
    extra: [f64; 8],
}

impl Path {
    pub(crate) fn new(points: Vec<f64>) -> Path {
        let mut point_with_len = Vec::with_capacity((points.len() - 2) / 2 * 3);
        let (mut x1, mut y1, mut i) = (points[2], points[3], 4);
        while let [x2, y2, ..] = points[i..] {
            i += 2;
            let len = ((x1 - x2).powf(2.0) + (y1 - y2).powf(2.0)).sqrt();
            if len <= HALF_ROAD_WIDTH { continue; }
            point_with_len.extend_from_slice(&[x1, y1, len]);
            x1 = x2;
            y1 = y2;
        }
        point_with_len.extend_from_slice(&[x1, y1]);
        Path {
            point_with_len,
            rd_fl: points[0],
            extra: [0.0, 0.0, 0.0, 1.0, 0.3411765, 0.5058824, 1.0, points[1]],
        }
    }

    pub(crate) fn build_bed(&self) {
        self.broaden();
    }

    pub(crate) fn build_icon(&self) {}

    fn broaden(&self) {
        for side in [false, true] {
            let mut points = Vec::with_capacity((self.point_with_len.len() + 1) / 3 * 2);

            if let [x1, y1, l, x2, y2] = self.point_with_len[..5] {
                let point = self.normalize([x1, y1], [x2, y2], l);
                let point = self.rotate(point, side, std::f64::consts::FRAC_PI_2);
                // points.extend_from_slice(&[point[0] * HALF_ROAD_WIDTH + x1, point[1] * HALF_ROAD_WIDTH + y1]);
            }

            let mut i = 0;
            while let [x1, y1, l, x2, y2, ll, x3, y3, ..] = self.point_with_len[i..] {
                i += 3;
                let first = self.normalize([x2, y2], [x1, y1], l);
                let second = self.normalize([x2, y2], [x3, y3], ll);

                let dot = (x1 - x2) / l * (x3 - x2) / ll + (y1 - y2) / l * (y3 - y2) / ll;
                if dot <= -1.0 {
                    continue;
                }
                let theta = dot.acos() * 0.5;
                let sin = theta.sin();
                let d = ((first[0] + second[0]).powf(2.0)) + ((first[1] + second[1]).powf(2.0)).sqrt();
                let point = if self.clockwise([x1, y1], [x2, y2], [x3, y3]) == !side {
                    [(-first[0] - second[0]) / d / sin, (-first[1] - second[1]) / d / sin]
                } else {
                    [(first[0] + second[0]) / d / sin, (first[1] + second[1]) / d / sin]
                };

                let cw = if self.clockwise([x1, y1], [x2, y2], [x3, y3]) { 1.0 } else { 0.0 }; // direction
                points.extend_from_slice(
                    &[point[0] * HALF_ROAD_WIDTH + x2, point[1] * HALF_ROAD_WIDTH + y2,
                        l, -first[0], -first[1], cw, theta]);
            }

            if let [x1, y1, l, x2, y2] = self.point_with_len[self.point_with_len.len() - 5..] {
                let point = self.normalize([x1, y1], [x2, y2], l);
                let point = self.rotate(point, side, std::f64::consts::FRAC_PI_2);
                // points.extend_from_slice(&[point[0] * HALF_ROAD_WIDTH + x2, point[1] * HALF_ROAD_WIDTH + y2]);
            }

            println!("{:?}", self.smooth(points, side));
        }
    }

    fn clockwise(&self, a: [f64; 2], b: [f64; 2], c: [f64; 2]) -> bool {
        (b[0] - a[0]) * (c[1] - b[1]) - (b[1] - a[1]) * (c[0] - b[0]) <= 0.0
    }

    fn rotate(&self, point: [f64; 2], side: bool, theta: f64) -> [f64; 2] {
        let mut turn: Vec<Vec<f64>> = vec![vec![0.0; 2]; 2]; // direction matrix

        if !side {
            turn[0][0] = theta.cos();
            turn[0][1] = -theta.sin();
            turn[1][0] = theta.sin();
            turn[1][1] = theta.cos();
        } else {
            turn[0][0] = theta.cos();
            turn[0][1] = theta.sin();
            turn[1][0] = -theta.sin();
            turn[1][1] = theta.cos();
        }


        [turn[0][0] * point[0] + turn[0][1] * point[1], turn[1][0] * point[0] + turn[1][1] * point[1]]
    }

    fn smooth(&self, points: Vec<f64>, side: bool) -> Vec<f64> {
        let (mut res, mut i) = (vec![], 0);
        while let [x1, y1, l, x2, y2, cw, theta, ..] = points[i..] {
            i += 7;

            let num = 6.0;
            let mut thetas = vec![(std::f64::consts::PI - theta * 2.0) / num].repeat(num as usize);
            thetas[0] = thetas[0] * 0.5;

            let (mut nx, mut ny) = (x2, y2);
            let mut normals = Vec::with_capacity(12);
            for &theta in thetas.iter() {
                let normal = self.rotate([nx, ny], cw == 1.0, theta);
                normals.extend_from_slice(&normal);
                nx = normal[0];
                ny = normal[1];
            }

            let d = if !side { 2.5 } else { 0.5 } * HALF_ROAD_WIDTH / theta.tan();
            let (mut x, mut y) = (x1 - d * x2, y1 - d * y2);
            res.extend_from_slice(&[x, y]);
            let d = if !side { 2.5 } else { 0.5 } * HALF_ROAD_WIDTH * 2.0 * thetas[0].sin();
            let mut j = 0;
            while let [nx, ny, ..] = normals[j..] {
                j += 2;
                x += d * nx;
                y += d * ny;
                res.extend_from_slice(&[x, y]);
            }
        }
        res
    }

    fn normalize(&self, a: [f64; 2], b: [f64; 2], l: f64) -> [f64; 2] {
        let d = 1.0 / l;
        [(b[0] - a[0]) * d, (b[1] - a[1]) * d]
    }
}
