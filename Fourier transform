fn main() {

    let mut test = vec![-2.1462322096039586, 1.4654386281779268 , 1.0454548692078545, 2.161314797412255,2.1078925855100357,
                        0.10654659813447859,-2.6379305378333537,1.24579850818007,-5.8054102921725965,3.927169766502753,
                        -1.016868109572084,4.565828484981356,-3.88213447191179,-2.438203729881703,-2.9590399261547105,
                        -0.5019249188141595,-4.710038061391035,-0.4769042252185831,0.20611213030199785,2.630666599141444,
                        -0.8775948353378653,1.8379617653030014,-2.2056740184188195,-1.404318889884595,-0.9350795008130652,
                        3.735262047231891,6.851830252770654,-0.2732048228212509,0.3426697530825673,4.9366612557446015,
                        -5.310795122215747,-2.227111074539482,-0.31211740984682446,-0.806882968392586,-4.2840522800577,
                        -3.477742554894094,1.2771171260473784,-2.5324330247340914,-2.864445517201558,-3.1721046685282737,
                        2.3482571623202544,2.5532642018504474,2.9389062647517146,1.3326285517207799,4.8970321126985255,
                        1.0473300486656854,3.1117998962771996,-1.3104040907117391,-1.2964881312214143,-2.099802852713917,
                        1.6973309985296277,-0.4483611190529601,3.3188070208351252,-3.413320720365568,-0.5104602388903192,
                        -1.9990712549341674,-1.0242923657451206,-1.5734531803367409,2.070727753265573,0.6694584573205156,4.217634962393292,-0.2045636559568118,1.613954639647262,3.597797062151421,-4.767974069933775,1.951482270724902,0.2858973002025214,-4.000645157515613,-1.6648552416328122,6.966004850990782,3.0914838600441907,-2.860892040592116,3.362932837564302,-3.056792335978713,-3.1770460437602273,1.3073003094326472,-0.9401248066069509,-1.0842955452477687,-2.0443876777995054,2.2931504681222346,-0.6795766295142502,-4.908955332032855,1.6118923477206835,0.11512888465198073,0.05499948503616725,2.0154817476408007,4.448874280718292,6.365999353394594,-0.6030666658605862,-5.017946280715616,-3.488982253328707,-0.41790725665075495,3.2961330229148462,2.3691382706678676,-2.3823360553821615,-2.1559917982546617,0.8600506723900425,-3.7842015256837813,-3.8312858790476745,3.9849932608238,-1.77120065548661,-1.1760484118374483,-4.220190059802659,3.130174712298773,1.6466415270376118,-1.462230125725009,0.5870014773012956,3.0080698575513405,2.737464273713615,-1.9762666986927582,2.893891686944687,-5.544484860140162,4.525568871172015,-1.9465974380366244,-3.4054110095859267,-0.9937887286295974,-1.5538590128639123,3.164497816296314,-0.1396964104800683,-3.9848846258338275,0.927484623921781,-2.7569898019891843,0.9361484121849669,-1.2578033273641274,0.9879012154180729,2.535288428758408,-2.5418973591537575,2.671549295850345,3.085239912482317,-0.9896754879510726,1.5355848053634915,-3.3289067374298598,1.684213849056369,-0.8396240847474674,2.177449488702525,-1.2000193974902893,-1.8424874795171633,-0.156871163669407,3.050380337457718,-1.6295371826682246,-0.09370354633326305,-4.205690001316447,-1.3581207685513477,2.804010310244391,1.1748763695602116,2.3244708527789317,0.14272142863530912,2.039889783281008,-2.502971602312068,-1.9225410976478037,3.21641817548107,-0.5014638322096918,1.1007273412104794,-0.20570452286534935,-1.8164604281745098,4.114248504341952,-0.42756223417777517,-0.45967393680579494,-3.2201936203638883,-1.5289113325366646,3.176065971984151,4.022498271671558,-1.0431474574119008,0.16002897549750922,2.5528822177098642,-1.0487462295727132,-1.481810353789406,0.7832796162803882,2.0978629789564027,1.4392001016476763,0.9191396016390739,-2.0580026606482225,-2.3655274181849055,-4.424379378816752,0.11425051629601235,-2.504490195585013,-0.5228514614088517,0.3975852680945645,-2.5594085577559476,0.833556727387883,-7.1521150623501235,-3.823970056662537,-1.58123199629564,0.8934091545477925,3.755014353778443,0.05916294747747397,4.8773205843631455,1.9110802523118753,0.054315196649259934,3.298805465185299,-3.7112851316022444,2.268880913315745,-0.18945340984993003,4.955610689246597,2.048692040637042,2.08244467192602,2.3310278984914636,-0.9999323872351757,-4.803902472534245,-3.6058645426581917,-1.1097066568633829,2.1513579105335667,-0.9898688027977744,-0.5129852636476655,-1.743460085312313,-0.28966440194434195,-5.182037464758916,1.5141600279219585,1.7855224277221664,2.5730886888606213,-1.1363290459641988,1.2848985231862746,-1.2494254305212837,3.445629291670396,-3.781999616136345,-0.6482566946995674,-1.33241329078889,-0.2262583045625664,1.2584214842784525,-0.9171070753503071,-4.490707279774834,0.48839736511665954,-4.117316006992214,-0.9029687010793686,1.758004088077068,-0.39992698867146514,-4.4905027825939205,5.7447525195638125,0.5283557541349622,5.287662258937414,-5.183216844622118,-1.577143637601495,-0.7070431603070737,-2.1798025673645105,1.9435211616165389,1.5447828020291903,-2.018023259410458,-2.397282910194836,-4.1812302333308295,2.848097719307832,-0.44654041328119776,1.3098142743010435,2.4354975627307485,3.1458647527253683,-1.4625684189624857,-2.0494941336294223,2.4904834183489006,2.8972647487041034,0.7867058590476107,2.0222021800700776,-2.100512625765696,0.06662735835240496,2.2418963041955466,-0.8615708141018683,-4.907562706972338,-5.963996898272402,0.15709942561011214,0.75726778500453,-4.648261313047987,0.46003867834827084,3.067491418819121,0.4904881390495255,2.060012951095131,0.007308289977439653,-2.1094189774807637,1.1985075545946602,-0.995035815134428,1.6266896949159695,3.286280938423256,-4.477850248612556,2.111872174509704,-0.5820441674968515,-3.9656102415889736,-3.434865842260721,-3.2143446575817047,1.1934007193736358,2.8458669036764066,-2.390375450304436,1.088251954275568,4.29800426631976,0.3298850828412693,0.30127841393533505,-1.7525744379982995,3.1689119766316702,3.6786549085730185,0.6752536502732656,1.6467390875869576,-4.116548892638532,0.19804891064181632,-4.151100014457687,-1.7759555987338156,0.6633067285628823,0.04680103433721816,-1.923322498185179,3.2199213777472524,0.20127933909996287,-1.0879035332612943,-0.22640005917325978,-4.15619839735973,-1.6052320119947834,-0.9839133141759105,3.295550114825752,3.517666741107389,-3.221390745642775,0.5572384695284579,2.61247211923337,-1.2567705366845159,0.9041659712615072,-1.8344813540466554,-0.08740453775149015,-2.645683760426808,-1.8167932721089497,0.006366023366825874,2.6028633917447435,-4.078626932929126,0.193061154684687,0.28867027045084503,-3.9207078015429717,-4.737002915569127,-3.060613369238136,0.3701453228416448,-2.714653496850249,0.18894858057218633,-3.770986297712124,2.0111908482590994,1.114038438846736,3.9868131264461613,4.33724371766616,1.8706534961077321,-4.391263836287773,-2.5755981428877703,-2.064738598357872,-0.7978652606530702,0.5282216956416899,-1.6874698132280037,4.125338319625738,0.08971998401360554,-0.5302838338684946,3.3218916613895355,-0.9766879404226175,-2.4266017790889842,-4.887073338195615,0.6750524611533991,5.9116953827902865,0.17159848658809773,-2.324479758531623,0.5706509446735213,-0.043124330517597856,-1.4528341168510623,0.14903093144357243,1.7837790162776588,-2.3025387736825857,3.1105830015564693,1.236756635338009,0.1777964448853112,-2.4263273671673202,0.27242816450495067,-1.383185235233283,2.545931690653465,0.2003512412438039,0.9463061678843191,2.372855743538925,2.6796382488409423,1.3221106457783958,1.3244640858425314,2.6367422272553105,7.747323736170869,-1.790452065266761,0.5121984247319891,-1.7111896138981697,-0.5559658244132064,-3.416523726828446,1.523000365664344,-3.4028680018479713,-1.8465741171366552,-0.6037413228776408,-2.2414718323939753,-0.09553608321080426,3.2397131955676315,-2.244614199659832,-2.0749844506376585,2.619560008977005,0.07227240117273626,1.6816490137394047,1.0896131709489474,1.9653893947615932,1.7991743355851133,1.7149875823872303,-3.3565118560295795,-3.8253960849830735,-0.8002661414555995,4.345639361733135,2.7046721811236374,-5.162741392295868,-9.078373983631943,-0.09326000163365666,-0.5053149441290301,-3.3493318444025064,0.8828787850631552,-2.795789148168036,2.33867385390374,-1.6628021306510132,3.0708684944312346,4.419297988754479,2.4387411070894602,-2.2217341033382065,-3.68160296705632,-1.557104017975202,4.55511881693531,2.681285767836375,-0.42983981015448147,1.7043986781345375,0.560998308223948,-0.9804459059703967,-6.0383181793426886,-1.3952377726808454,-3.558572760863109,0.423380174447353,-0.08957030736776561,0.3586907413591044,-0.801595178081061,2.069352448573701,1.028250705717274,-0.9866180025493784,3.1195678203735793,1.6285790560822546,1.141570943093559,3.386825613276464,-0.7209159288482616,3.5212782547136645,-0.8107739957689524,-4.829281071413878,-3.570456394575983,1.1517042297203433,2.421383583013445,4.138603409652072,0.7225708019873759,-3.31901980575453,-1.1925299490956265,-3.3130647671474995,-3.0073722849829214,2.2999311505657962,1.527117976296763,4.012802826805897,4.307883824125698,0.8789998355738093,-0.7066555112461872,0.8007422514055981,0.8748061747124912,-2.3986012059344257,-1.7736820509001947,0.1637475637394062,0.14096519020541215,-0.006173508834881977,0.5266748465105056,-3.0033704257244245,0.9383691831610919,-1.1370140542778806,-2.483948132814375,1.1237332702334926,-1.088383519237286,4.341449983931565,-3.5121992725459723,-0.01336741541503389,0.44306827868016196,-8.066854723480464,2.071262944809653,-0.5592283713004225,1.3670284699801123,2.405050389182673,0.291824388436302,-2.9283602036898735,-2.70746258568778,-3.868135362656697,0.3309863085478446,-2.2041069989911795,0.3767762233344306,0.20042927915917025,2.3908538915216644,1.7293758129378354,2.738002956870127,0.23805537984783143,6.308402684238013,1.0308204059253394,6.035166156837882,3.3576471983145986,0.2490538523844772,0.31962833025936577,2.227316512039659,2.6975696695633484,-3.4654780992170755,1.9472104754165758,0.5449029356018746,2.338622262232784,-2.5033012865324293,-4.262849284942269,3.0882622728672073,-5.588183577238598,2.4301138229442367,-0.059209368473770785,-0.6236772909124997,-0.6649559941085181,2.028196322309958,8.865173611040031,-2.859668421942477,0.5469492599217604,1.127447147166623,-1.8173186928036849,4.150959484928945,1.4483534814060917,5.395975344813439,5.854147348648166,1.8146781269041599,1.247376362604418,-3.3949250399941837,-3.098689926072951,-3.266137774036654,1.576114465012999,2.4045139435740728,-1.7230293844743145,3.8043651001118284,-1.8863922028232547,-2.743967747798652,-1.1957147503570957,-1.0672183822673038,-1.1124305283424425,1.2105010096744055,5.044070429977497,-0.19205462587903566,-0.5466309972038235,2.1673159674390976,-0.3763885145733076,-1.805484018953457,-1.213551726525517,-1.195533837116359,2.933443923811789,-3.143109328869194,0.6021958543457211,1.1964201377397479,-3.565157577576416,0.8572633200014136,-1.5072097447403656,-1.0059705225253324,-2.8435989232912218,-5.712778636543621,1.2740496025227865,2.73111498280482,-1.9612926113333509,0.5518073480208049,1.983394611863785,-5.6702824124157996,-0.5091267577212322,-3.1512489187442254,-0.33557764215001357,-0.7288624575866101,-0.1980221150461543,-0.6830320164205654,0.4322323299824762,4.1800113675978245,-1.1252624755370035,-2.9487907504731647,4.828704976445957,3.305903245329927,0.38041894993407566,-2.1808911451505724,1.2079251925217125,-1.1571953242151691,-1.7078024474226436,4.035091729973596,0.31402382140913854,2.789807746843091,1.7408544269644457,-0.7829807779831739,-4.821387515369611,3.007780649775681,-3.851235423921068,2.100361645197606,3.448903638843228,3.762044537053536,2.791540088184819,-5.760471867427901,-0.9971621355765332,-4.637984855416382,1.5312962029505401,-0.6320244349511499,5.678570836570597,1.4017381592089744,-1.4270144106748313,-0.4186673086237108,-3.9835854344104096,-0.7616707731823213,-1.1361762725169962,-0.8174231217305925,1.5314482741288749,-0.4214879850974186,-3.607017006949414,-0.09576791987319644,0.29090550372614543,0.6787815135303559,-2.2403586383443383,-4.473455111562812,-0.3132963610357936,5.076200950122085,-0.8788176053996763,-0.04924170933726235,-1.0454354947293085,0.41053991172764026,2.4527674236353754,1.396637596105113,-0.22365211304271615,6.618726525883166,0.6535118403851347,-2.078602058940197,-0.1223884900299883,-0.003377575610817418,-1.7568236477544976,-1.3394732902721096,-2.0576898933422947,2.0307546668780567,3.685928095423878,3.4118926747470413,1.1928875560422283,0.8222558553796299,1.9769032663399413,1.2882396782520824,3.855599991193816,0.2998621428029695,2.888963028991375,2.4007506995358705,-0.21737713171054363,0.8648146468246461,0.12163393140055123,-7.026866338577786,1.6372154908842216,2.683936863050975,-2.6656028562871237,1.9778846495785276,-0.6491345023254185,-0.456640140234395,-5.407614083954767,1.2398579153085247,3.0398974231313414,-0.11140029746982705,3.0528618968482713,2.5578551690263875,5.925539553895382,-0.3089257688868632,-2.372604917849787,-1.3360465939792403,3.175303794368977,-3.2773147214552543,-0.222871939794427,-0.720358200553555,0.3772437241375048,-0.9767591867337062,-3.512534319909326,-1.0487508407070911,-1.7928581052141443,-3.4718301269075513,3.27883906034366,-0.43236086033598864,1.545801272791755,0.9252327528992322,-1.201943918137799,3.363846861451325,-2.152943594347888,1.6702525562298263,-0.6380136040573803,2.847436119399802,3.444698682760827,0.09130164940687052,0.5412668905552893,2.476167891335838,1.0273748404652912,-0.2257467590159068,-0.6155453656960818,2.396121173182305,1.9689913852189869,-1.2107080485217727,-1.595713949239188,-2.0559271305529587,-0.11629203295314361,5.4855349376236795,-4.850024241432514,2.757045513275771,1.645614620780724,1.5279254757012923,-2.080891899306787,-0.1235874639598572,-2.860764193876832,-3.9495482971070897,3.6526472155109966,-0.3923018414224883,0.7496937201009882,-4.742123269289223,-0.6642114351867947,-1.0488711475680474,-3.7455746163095935,-2.8452155126715875,2.5039335281526727,3.227401989352412,3.6605684331047503,2.3577522143374336,5.879139614911643,4.379112917656926,0.818106763417543,2.0747110484781928,3.1990366348183557,3.412604762786961,-0.09376655117540966,1.553497065909517,4.397417484563673,1.5314441105267034,1.0203529124840205,-0.42391442135120494,-5.38667603545313,-3.010378032721588,0.5036999937895874,0.3797187942356418,3.68288893386831,-0.7651379590489191,-3.014436919346831,3.074008388233288,2.069584272107112,2.037217565500515,0.4557644886462453,3.481955358941736,3.8189195788352803,0.6906140056136914,2.7050777894045126,-1.0836321592899636,-0.5942053431823404,-0.49450190034308894,-0.3543503212497745,-0.968865870140462,-1.3202945272210949,2.083270286408955,0.6869350682067203,0.9627632796474725,0.23091458501118955,3.5060614201439795,0.36714415891486696,2.6296062943497094,1.4225444715701796,6.576581961728265,0.1665550523597712,-2.328522415178142,1.1249796300548545,-3.2176594010659962,2.339099926721297,3.7378743808428196,-0.17826187336275884,2.6135170172574993,2.9211906130197174,-1.168127654266447,-1.0866782231622016,2.6291189487033653,-3.300642820011359,-0.2025235227481974,1.0073381232171867,-0.7078280527459945,5.227010696252521,1.0212899196935097,-3.273772727485328,-0.5509552947471953,-3.9872487916944377,-1.891401237457865,2.9661351681831154,2.3793471776372925,-1.7187403620525374,0.9372669017390518,2.245046166883334,1.312696216393114,-3.713564735232789,0.4757513125932893,-3.093338611145259,2.0784821028337026,0.8837193470300415,-5.049593830757869,-0.09796096731516218,-1.024565505348383,-3.7743223364964362,-2.2517454280656546,-0.65135764098946,3.0431716017714043,1.6733334689345085,1.8669755468853915,-0.18582152481392766,0.5818667994789316,-2.215060577915687,-3.6918257601364006,-2.8997045389520597,0.5495773235674744,0.20505988561917,2.627161808659,2.6498533440839336,-1.4022270919308044,-0.6148882199892358,0.3035353027267329,-2.188152944008432,1.0365159578683456,0.8066169776883734,1.8160551805637564,-0.6040895685736145,1.1810442085509207,3.9171136888277953,-0.8669829850225795,-3.5649639140916167,1.7519184281460607,3.936010522506205,3.370545038692557,-0.48236838654739045,-0.6067727834898207,-2.1442349791804727,-1.263583813085551,-1.998228942764349,-0.9570054380354349,-0.4183637407118858,2.1937470859860433,-3.6137536556771237,-3.0152578023409258,1.0401846748369663,-3.4987561759049974,-2.817672032618117,-0.1811639110312665,-1.0363719505173103,0.16408297711318132,0.8118315541843744,4.440586560310685,2.516028492440082,5.4539803630908015,3.502769274121544,-0.5653394422328955,-1.2152440304269698,-0.7199549154459066,3.815697427218219,2.252044319921227,-0.14650889280711699,3.1112236004731493,-0.5036917139742185,1.3664391260505022,-3.204401324396258,-3.7504309756493868,-3.9755197816288783,1.6221998805787665,3.89118086923859,2.6288132556492543,2.5403520275235696,-2.839557986091074,1.703836248103133,-0.9940506764139506,2.483480929337614,-0.7685883107194671,-4.119838453022584,-3.0114464778322483,-2.0428088506589597,-2.6857262537867475,-0.16024902335955926,-0.4428979524748647,-0.052339443310713385,-0.6643742864734045,3.674938485454243,-2.8292997781868676,4.0107376783154205,-1.8336734523310352,0.9802226967916676,2.9583992667780907,0.9424386286332501,1.3384815525182185,0.8416357445869583,6.455536302827976,0.12072626078031884,-2.7729510696524633,-3.1164381798925422,0.9264175125335758,-0.18592541292219733,-0.8487995568154989,0.8212769597878579,-0.9428645426433863,-1.464846488228571,-0.7894282705522817,-4.581957758186895,-0.3185077025373793,1.6091181805704045,-0.600784778276032,0.135683775778636,1.034268690987382,1.5247500926220214,-5.945301449727877,-8.656134910966127,-1.2469385432639246,-1.4749711304248172,0.04153741839795283,-2.7832555965436447,-2.3372226754994347,1.4654760336108437,-1.516186846472157,-0.5657852534138466,-4.068942256120698,-0.7763548839317364,-2.1913239345560385,3.409941490087262,3.161291667724754,-0.6125904265481621,-3.5811416347568636,0.1336488026113678,0.9492972189649882,-3.4657678891617207,2.4196595026292527,-3.4735816201549214,0.448328443779482,4.620463035804172,-3.1395522871933665,-3.130685076215443,-3.57726194142216,-3.5368044414387696,-1.0724009288269236,-3.9988326079155434,2.0205051850276323,0.23996813183901206,-1.7588740517530028,1.0726539310932508,-1.804536876518839,1.6097766553479853,-2.1061671758605,4.696079932478574,4.869065020314153,5.890022696313477,2.5529187942650395,0.2593175168690531,-3.094429046528368,-0.45557266249311845,-0.8343868942710689,-1.489082839919977,-0.1214063347820879,0.6758578956321262,-1.0254760036613888,-2.7640848648017395,-1.9342260766623869,-2.0237127249625595,-1.9031463998788223,-1.5263872078219705,3.4384026604220166,4.39614713999053,-0.1169078336991185,1.3307858488024167,-0.015315283072987906,-3.024560982671397,-3.1523303033423042,-2.2512488143808103,0.1446731387062911,2.0456408393629513,2.5591924880311696,0.5974951590071801,-0.6801676587878189,-3.401676254462834,4.647660188459566,-4.110339194831197,-3.9774424852822037,5.391095887999941,-0.9787205698425991,0.9538720371894358,4.490615077524535,3.6604306699980373,-1.5201551299054183,-1.5650582098555055,-3.487294228784557,1.2630703344013654,1.6905914024982396,2.455579542237903,3.321801012846964,-0.6885132009563912,1.139921902196249,1.7428869953012296,4.631336661348782,-1.6301121031689363,-1.1175155781303623,-1.1070937944275614,-2.1745927371155425,-1.5651447273371932,-1.2359944648393801,-4.460846831221302,-1.450733014103153,2.7712125569189947,1.488469144696674,4.306411586062757,-3.3165722976128404,3.447265434753298,-1.9135208752074462,-1.6559339187240019,-0.3329910668042372,-3.9112249297062847,-2.475225700342041,2.5232131999539016,2.80804755172818,-1.1640765931328239,-1.7261507148485211,-5.800435467623262,-0.528003648894571,-2.472205891518376
    ];

    data_filter(&mut test);
}

fn complex_add(a : Vec<f64>, b : Vec<f64>) ->Vec<f64>{

    let mut y = Vec::new();
    y.push( a[0] + b[0]);
    y.push( a[1] + b[1]);

    y

}

fn complex_multiply(a : Vec<f64>, b : Vec<f64>) ->Vec<f64>{

    let mut y = Vec::new() ;
    y.push(  a[0] * b[0]);
    y.push( -a[1] * b[1]); //image power of two equal to -1

    y
} //

fn Euler_function(){

    let theta:f64 =0.0;
    let mut e_powf = 0.0;
    e_powf = theta.cos() + theta.sin() ; //put a string type i here.
}

fn data_filter(mut data: &mut Vec<f64>){
    let n = data.len();
    // let mut t =0.00666667 ;
    let mut mean =0.0 ;
    let mut re = vec![vec![0.0 ; 2]; n];
    let mut cor = Vec::new();
    for i in 0..data.len(){
        mean += data[i]

    }

    let mut t_real= 0.0;
    let mut t_image= 0.0;
    mean /= n as f64 ;

    for i in 0..n{
        // t_real  = data[i]* ((-2.0 * std::f64::consts::PI * i as f64 / n  as f64 ).cos() ) * (std::f64::consts::E.powf(-0.5 * (t * i as f64).powf(2.0))) ;
        // t_image = data[i]* ((-2.0 * std::f64::consts::PI * i as f64 / n  as f64 ).sin() )  * (std::f64::consts::E.powf(-0.5 * (t * i as f64).powf(2.0))) ;


        for j in 0..n{

            t_real  +=  (data[j]  * ((2.0 *  std::f64::consts::PI * j  as f64 * i as f64 / n  as f64 ).cos() ) )  ;

            t_image += -(data[j]  * ((2.0 *  std::f64::consts::PI * j  as f64 * i as f64 / n  as f64 ).sin() ) )  ; //std::f64::consts::PI

        } // frequency field are altered to the time ozone
        re[i] = Vec::from([t_real, t_image]);

        t_real= 0.0;
        t_image= 0.0;




        // let mut m = data[i];
        // Xk = complex_add(Xk , complex_multiply( [m ,m]:Vec<f64>, &[t_real,t_image]:Vec<f64>)) ; //this does not make any sense

        cor.push(t_real + t_image); //this is for the magnitude and frequency level, we need to calculate the square of that square root of that .



    }// wondering? square root or not ? how much should it take

    //
    let mut i_real= 0.0;
    let mut i_image= 0.0;
    let mut Re = Vec::new();
    for i in 0..n{
        // i_real  = de_noise[i]* ((-2.0 * std::f64::consts::PI * i as f64 / n  as f64 ).cos() )  * (std::f64::consts::E.powf(-0.5 * (t * j as f64).powf(2.0))) ;
        // i_image = de_noise[i]* ((-2.0 * std::f64::consts::PI * i as f64 / n  as f64 ).sin() )  * (std::f64::consts::E.powf(-0.5 * (t * j as f64).powf(2.0))) ; // original calculation

        for j in 0..n{
            i_real  +=  ( re[j][0] * ((2.0 * std::f64::consts::PI * i as f64 * j as f64 / n  as f64 ).cos() ) ) ;
            i_image +=  ( re[j][1] * ((2.0 * std::f64::consts::PI * i as f64 * j as f64 / n  as f64 ).sin() ) ) ;
            //complex analysis

        }//step by step decay
        Re.push((i_real - i_image)/ n as f64 ); // maybe  we  could use a implement here / n as f64



        i_real= 0.0;
        i_image= 0.0;



    }


    // for i in 0..Re.len(){
    //
    //     Re[i] /= n as f64 ;
    //     im[i] /= n as f64 ;
    // }

    println!("................\n{:?}" , Re);
    // println!("................\n{:?}" , im);
    // println!("................\n{:?}" , re.len());



}

fn high_frequency(){     // high frequency filter, for every two group \,
    let x = vec![0.0, 0.0 ,0.0];
    let mut hx = 0.0;
    for i in 0..(x.len()-1){
        hx = (x[i] - x[i + 1]) / 2.0;

        // let mx = [2.0.sqrt() , 2.0.sqrt()];
        // let mx = [2.0.sqrt() , -2.0.sqrt()];
    }
}
fn low_frequency(){    // low frequency filter
    let x = vec![0.0, 0.0 ,0.0];
    let mut hx = 0.0;
    for i in 0..(x.len()-1) {
        hx = (x[i] + x[i + 1]) / 2.0;
    }

}

fn low_filter(data :Vec<f64>){ // remove the low frequency part

    let mut data1 = data ;
    // data1.sort();
    // data1.reverse(); //看起来好像是不行
    [1.0,2.0,0.0].sort_by(|a,b|{a.partial_cmp(b).unwrap()}) ;

    let x = (data1.len() as f64 * 0.95).floor() as usize;
    let y = data1[x];
    for i in 0..data1.len(){
        if data1[i] < y {
            data1.remove(i);
        }//
    }



    // deorder


}


//
// fn haar_wavelet(){ // let us just consider the simplest one
//     let x =
//
//
// }


// give up your own future to satisfied others, what should I say?
//
// fn father_wavelet(){
//     let x = vec![] ;
//
//     for i in 0..x.len(){
//         while x[i] < x[i+1]{
//             while x[i+1] < x[i+2] {
//
//             }
//         }
//
//     }
//
//
//
// }



// father function
// fn father_


// for i in 0..re.len(){
//
//     if re[i][0].abs() > 0.5{
//         de_noise.push(re[i][0]);
//
//     }else {
//         de_noise.push(0.0);
//
//     }
// }

// for i in 0..N.len(){
//
//
//
//     // alter the parameter
// }


// println!("{:?}denoise is ....................... " , Re);
// for i in 0..data.len(){
//
//     while i <= 0{
//         if i + j <= data[i] {
//
//
//
//         }
//     }
//     // actually it satisfied the intuition
// }


// at least the first step is done that's so how discrete fourier analysis go


// println!("................\n{:?}" , re);


// for i in 0..re.len(){
//
//     de_noise_r.push(re[i][0]);
//     de_noise_i.push(re[i][1])


// let mut de_noise_r = Vec::new();
// let mut de_noise_i = Vec::new();

 // we do not need  to  use the standard package, instead, we should develop our own
//wavelet packet:
